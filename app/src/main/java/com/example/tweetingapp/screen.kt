package com.example.tweetingapp

import androidx.compose.runtime.Composable
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.FavoriteBorder
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.Query
import com.google.firebase.firestore.ktx.toObject
import java.util.Date

val TwitterBlue = Color(0xFF1DA1F2)
val TwitterDarkGray = Color(0xFF657786)

data class Tweet(
    val id: String = "", // Auto-generated by Firestore
    val username: String = "User", // Default username
    val message: String = "",
    val timestamp: Date = Date(),
    val likes:Int=0
)

@Composable
fun TweetingApp()
{
    val db = FirebaseFirestore.getInstance()
    var tweetMessage by remember { mutableStateOf("") }
    var tweets by remember { mutableStateOf<List<Tweet>>(emptyList()) }
    var userName by remember { mutableStateOf("") }

    // Fetch tweets when the app starts
    LaunchedEffect(Unit) {
        db.collection("tweets")
            .orderBy("timestamp" , Query.Direction.DESCENDING)
            .addSnapshotListener { snapshot, _ ->
                tweets = snapshot?.documents?.mapNotNull{ it.toObject<Tweet>()?.copy(id = it.id) } ?: emptyList()
            }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
            .background(color = Color.White)
    ) {

        // add spacer here
        Spacer(modifier = Modifier.height(32.dp))

        Text(
            text = "Tweeting App",
            fontSize = 24.sp,
            color = TwitterBlue,
            modifier = Modifier.padding(bottom = 16.dp).align(Alignment.CenterHorizontally)
        )

        // Text field for entering user name
        OutlinedTextField(
            value = userName,
            onValueChange = { userName = it },
            label = { Text("Enter your name", color = TwitterDarkGray) },
            modifier = Modifier.fillMaxWidth(),
        )

        Spacer(modifier = Modifier.height(16.dp))

        // Text field for typing a tweet
        OutlinedTextField(
            value = tweetMessage,
            onValueChange = { tweetMessage = it },
            label = { Text("What's happening? ;)", color = TwitterDarkGray) },
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(16.dp))

        // Button to post the tweet
        Button(
            onClick = {
                if (tweetMessage.isNotBlank() && userName.isNotBlank()) {
                    val tweet = Tweet(username = userName, message = tweetMessage)
                    db.collection("tweets").add(tweet)
                }
            },
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(
                containerColor = TwitterBlue
            )
        ) {
            Text("Tweet")
        }

        Spacer(modifier = Modifier.height(16.dp))

        LazyColumn {
            items(tweets) { tweet ->
                TweetCard(
                    tweet = tweet,
                    onLike = { isLiked ->
                        // Update likes in Firestore
                        val newLikes = if (isLiked) tweet.likes + 1 else tweet.likes - 1
                        db.collection("tweets").document(tweet.id)
                            .update("likes", newLikes)
                    },
                    onDelete = {
                        db.collection("tweets").document(tweet.id).delete()
                    }
                )
                Spacer(modifier = Modifier.height(8.dp))
            }
        }
    }
}

@Composable
fun TweetCard(
    tweet:Tweet,
    onLike: (Boolean) -> Unit,
    onDelete: () -> Unit
) {

    var isLiked by remember { mutableStateOf(false) }

    Card(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            // Username and formatted timestamp
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = tweet.username,
                    fontSize = 16.sp
                )
                Text(
                    text = tweet.timestamp.toString(), // Format timestamp
                    fontSize = 12.sp
                )
            }

            Spacer(modifier = Modifier.height(8.dp))

            // Tweet message
            Text(
                text = tweet.message,
                fontSize = 16.sp
            )

            Spacer(modifier = Modifier.height(8.dp))

            // Like button and delete button
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                // Like button and like count
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    IconButton(onClick = {
                        isLiked = !isLiked
                        onLike(isLiked) // Notify parent about like/unlike
                    }) {
                        Icon(
                            imageVector = if (isLiked)
                                Icons.Default.Favorite
                            else
                                Icons.Default.FavoriteBorder,

                            contentDescription = "Like",
                            tint = if (isLiked) TwitterBlue else TwitterDarkGray
                        )
                    }
                    // Like count underneath the like icon
                    Text(
                        text = "${tweet.likes} Likes",
                        fontSize = 12.sp
                    )
                }
                IconButton(onClick = onDelete) {
                    Icon(
                        imageVector = Icons.Default.Delete,
                        contentDescription = "Delete",
                        tint = TwitterDarkGray
                    )
                }
            }
        }
    }
}